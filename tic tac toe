import tkinter as tk
from tkinter import messagebox
import math

class TicTacToe:
    def __init__(self):
        self.window = tk.Tk()
        self.window.title("Tic-Tac-Toe üéÆ")
        self.window.geometry("400x500")
        self.window.configure(bg="#2C3E50")  # Dark background

        self.board = [' ' for _ in range(9)]
        self.buttons = []
        
        # Status Label
        self.status_label = tk.Label(self.window, text="Your Turn! (X)", font=("Arial", 16, "bold"), bg="#2C3E50", fg="white")
        self.status_label.pack(pady=10)
        
        self.create_board()
        self.create_reset_button()

        self.center_window()

    def create_board(self):
        frame = tk.Frame(self.window, bg="#2C3E50")
        frame.pack()
        for i in range(9):
            btn = tk.Button(frame, text='', font=('Arial', 24, "bold"), height=2, width=5, bg="#ECF0F1", 
                            activebackground="#BDC3C7", relief="raised", 
                            command=lambda i=i: self.human_move(i))
            btn.grid(row=i//3, column=i%3, padx=5, pady=5)
            self.buttons.append(btn)

    def create_reset_button(self):
        self.reset_button = tk.Button(self.window, text="Restart üîÑ", font=("Arial", 14, "bold"), bg="#E74C3C", fg="white",
                                      activebackground="#C0392B", relief="ridge", width=15, height=1,
                                      command=self.reset_game)
        self.reset_button.pack(pady=20)

    def center_window(self):
        self.window.update_idletasks()
        w = self.window.winfo_width()
        h = self.window.winfo_height()
        x = (self.window.winfo_screenwidth() // 2) - (w // 2)
        y = (self.window.winfo_screenheight() // 2) - (h // 2)
        self.window.geometry(f"{w}x{h}+{x}+{y}")

    def human_move(self, index):
        if self.board[index] == ' ':
            self.board[index] = 'X'
            self.buttons[index].config(text='X', fg='#E74C3C', relief="sunken")
            self.status_label.config(text="AI's Turn... ü§ñ", fg="yellow")

            if self.check_winner('X'):
                messagebox.showinfo("Game Over", "üéâ You Win!")
                self.reset_game()
                return
            elif self.is_board_full():
                messagebox.showinfo("Game Over", "üòê It's a Tie!")
                self.reset_game()
                return

            self.window.after(500, self.ai_move)  # AI move with slight delay
    
    def ai_move(self):
        best_score = -math.inf
        best_move = None
        for move in self.get_available_moves():
            self.board[move] = 'O'
            score = self.minimax(0, False)
            self.board[move] = ' '
            if score > best_score:
                best_score = score
                best_move = move

        self.board[best_move] = 'O'
        self.buttons[best_move].config(text='O', fg='#2980B9', relief="sunken")
        self.status_label.config(text="Your Turn! (X)", fg="white")

        if self.check_winner('O'):
            messagebox.showinfo("Game Over", "üòî AI Wins!")
            self.reset_game()
        elif self.is_board_full():
            messagebox.showinfo("Game Over", "üòê It's a Tie!")
            self.reset_game()
    
    def minimax(self, depth, is_maximizing):
        if self.check_winner('O'):
            return 1
        elif self.check_winner('X'):
            return -1
        elif self.is_board_full():
            return 0

        if is_maximizing:
            best_score = -math.inf
            for move in self.get_available_moves():
                self.board[move] = 'O'
                score = self.minimax(depth + 1, False)
                self.board[move] = ' '
                best_score = max(score, best_score)
            return best_score
        else:
            best_score = math.inf
            for move in self.get_available_moves():
                self.board[move] = 'X'
                score = self.minimax(depth + 1, True)
                self.board[move] = ' '
                best_score = min(score, best_score)
            return best_score

    def check_winner(self, player):
        win_combinations = [
            [0, 1, 2], [3, 4, 5], [6, 7, 8],  
            [0, 3, 6], [1, 4, 7], [2, 5, 8],  
            [0, 4, 8], [2, 4, 6]  
        ]
        for combination in win_combinations:
            if all(self.board[i] == player for i in combination):
                return True
        return False

    def is_board_full(self):
        return ' ' not in self.board

    def get_available_moves(self):
        return [i for i, spot in enumerate(self.board) if spot == ' ']

    def reset_game(self):
        self.board = [' ' for _ in range(9)]
        for btn in self.buttons:
            btn.config(text='', relief="raised")
        self.status_label.config(text="Your Turn! (X)", fg="white")

    def run(self):
        self.window.mainloop()

if __name__ == "__main__":
    game = TicTacToe()
    game.run()
